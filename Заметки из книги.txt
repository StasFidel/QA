Статистика багов, найденных после релиза, и ее последующий 
анализ могут помочь идентифицировать проблемные участки 
процесса разработки ПО. Сопоставление статистики от релиза к
релизу дает, как правило, устойчивый паттерн проблемы, если 
таковая существует




Теперь обобщим уже известные нам мероприятия по улучшению 
поддерживаемости тест-кейса:
1. Сделать тест-кейс data-driven.
2. Не описывать шаги по явно очевидным сценариям (например, логин).
3. Не давать конкретных деталей, если они не играют роли 
при исполнении тест-кейса (например, имя товара).
4. Вынести во внешний документ повторяющиеся сценарии 
(например, семь шагов оплаты).



Я работал с тест-кейсами, включающими более одного ОР, в 
течение многих лет, проводя тестирование сложнейшего ПО, 
связанного с финансовыми транзакциями, и могу сказать, 
что 2 или больше ОР в одном тест-кейсе — это нормальная 
практика.

Вещи, которые у нас повторяются в разных тест-кейсах,
вынесены в секцию GLOBAL SETUP and ADDITIONAL INFO
тест-комплекта:
1. SQL1: select result from cc_transaction where id— <номер заказа>;
2. Баланс счета карты можно посмотреть здесь:
www.main.testshop.rs/<четыре_последних_цифры_карты>/bаlаисе.h tm.
2. Данные, различающиеся между тест-кейсами CCPG0001 и
CCPG0002, выделены жирным с подчеркиванием. В предло
женном тест-комплекте это сделано, чтобы приковать вни
мание исполнителя к различиям в похожих тест-кейсах.
В общем случае хорошая практика — пользоваться ВОЗМОЖНОСТЯМИ текстового редактора, чтобы выделить то, на
 что стоит обратить внимание



Мы договариваемся, что ID состоит из двух частей:
• первая часть — это буквенное обозначение (например, четыре 
латинские буквы), а
• вторая часть — это цифровое обозначение (от 0001 до 9999).
ID присваивается автором тест-комплекта, и в случае если новые тесткейсы (без ID) добавляются в тест-комплект, то буквенный ID берется из
предшествующих тест-кейсов, а цифровое обозначение = максимальное
цифровое обозначение + 1. Так если мы решим добавить тест-кейс для
тестирования оплаты картой Switch, то как мы его назовем? Правильно! 
SWPL0002. А картой VISA или MasterCard? Правильно! CCPG0003.
\
\
\
\
Рекомендую не удалять тест-кейсы насовсем, так как
во-первых, всегда возможна ошибка в суждении и нам нужно 
предусмотреть обратимость удаления,
во-вторых, тест-кейс, который, по нашему субъективно-несовершенному мнению, перестал быть актуальным, может еще пригодиться, хотя бы как память о годах жизни, проведенных не за 
штурвалом пиратского брига "Черная жемчужина", а за монитором "Хундаи" с неотдирающимся стикером "Моя компания —
мой дом".
В общем:
1. Создаем специальную директорию в том же месте, где хра
ним файлы с тест-комплектами, и называем ее
retired_testcases.
2. Создаем в этой директории файл с тем же именем, что и
файл тест-комплекта, из которого удаляем тест-кейс.
Искусство создания тест-кейсов 63
3. Переносим тест-кейс (cut/paste) из файла, больше не нуждающегося в этих услугах, в одноименный файл директории retired testcases.
В жизни все выглядит проще, так как обычно пускается в расход 
не отдельный тест-кейс, а весь тест-комплект.


Тезис
Тестировщики должны настаивать, чтобы спеки по максимуму 
иллюстрировались:
• макетами (mock-up),
• блок-схемами (flow chart),
• примерами (example).


Постановка мозгов
Не стесняйтесь рапортовать баги, которые вы будете находить в 
спеках. Если продюсеры не понимают, то объясните им без переводчика, что баги, посеянные в спеке, могут, как зараза, перенестись 
в код и тест-кейсы и баг, найденный раньше, стоит компании дешевле 
(об этом чуть позже), а посему учет таких багов является не правом, 
а обязанностью тестировщиков.
\
\
\
\
\
Возможности оздоровления кода и превентирования багов до 
передачи кода тестировщикам (иллюстрации последуют немедленно) включают:
1. Наличие требований к содержанию спеков и следование правилам их изменения;
2. Возможность прямой, быстрой и эффективной коммуникации между программистами и программистами и 
продюсерами;
3. Инспекции кода;
4. Стандарты программирования;
5. Реальные сроки;
6. Доступность документации;
7. Требования к проведению юнит-тестирования (о котором мы поговорим уже через 30 секунд);
8. Реальные финансовые рычаги стимуляции написания 
эффективного и "чистого" кода;
9. Наличие понятий "качество" и "счастье пользователя" 
как основных составляющих корпоративной философии.


Стандарты программирования — это неотъемлемая часть 
процесса, когда в компании работают два программиста и больше. Они по определению должны быть обязательны для всех

Документ со стандартами должен быть доступен на интранете.
Стандарты могут включать:
• правила о комментариях;
• правила об именах таблиц в базе данных, классов, функций 
и различных видов переменных;
• правила о максимальной длине строки;
• прочее.


\
\

\
Перед началом тестирования нужно убедиться, что
• код заморожен (обычно релиз-инженеры посылают соответствующий е-мейл);
• версия продукта на внутреннем сайте, на котором вы будете 
производить тестирование, является именно той версией, 
которую вам нужно протестировать.

\

1. Релиз (он же основной релиз) (major release) — стадия в 
цикле разработки ПО, идущая за стадией тестирование и 
ремонт багов, т.е. передача пользователям кода новой версии нашего ПО. Как правило, обозначается целыми 
числами, например 7.0.
2. Дополнительный релиз (minor release) — ситуация, когда 
после основного релиза планово выпускается новая функциональность или изменяется/удаляется старая. Дополнительный релиз не связан в багами. Как правило, 
обозначается десятыми, например 7.1.
106 Тестирование Дот Ком. Часть 1
3. Заплаточный релиз (patch release), когда после обнаружения и ремонта бага выпускается исправленный код. Как 
правило, обозначается сотыми, например 7.11.

Кстати, важный нюанс о плэйграундах, билдах и CVS. Основное правило 
для checkin: сначала сделай быстрый юнит-тест и убедись, что твои 
файлы компилируются по крайней мере на твоем плэйграунде, 
и уже после этого делай их "публичными" через checkin в CVS.

